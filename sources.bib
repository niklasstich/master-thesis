@Book{Gamma1994,
  author    = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides, John},
  publisher = {Addison-Wesley},
  title     = {Design patterns},
  year      = {1994},
  address   = {Boston, Mass.},
  isbn      = {9780201633610},
  note      = {Literaturverz. S. 375 - 381},
  series    = {Addison-Wesley professional computing series},
  pagetotal = {395},
  ppn_gvk   = {664828671},
  subtitle  = {Elements of reusable object-oriented software},
}

@Manual{metadocs,
  title        = {Metalama Documentation},
  author       = {{Metalama Developers}},
  month        = oct,
  organization = {{SharpCrafters s.r.o. PostSharp}},
  year         = {2024},
  timestamp    = {2024-10-21},
  url          = {https://github.com/postsharp/Metalama.Documentation/tree/develop/2024.2},
}

@Manual{dotnetdocs,
  title        = {Dotnet C# Documentation},
  author       = {{Microsoft}; {The dotnet contributors}},
  month        = oct,
  organization = {Microsoft},
  year         = {2024},
  timestamp    = {2024-10-21},
  url          = {https://github.com/dotnet/docs/commit/f747d15fbdcd9dbf75045d36a956bce22a120af5},
}

@Book{Meyer1997,
  author    = {Bertrand Meyer},
  publisher = {Prentice-Hall},
  title     = {Object-Oriented Software Construction, 2nd Edition},
  year      = {1997},
  isbn      = {0-13-629155-4},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/books/ph/Meyer97.bib},
  file      = {Full document:/Users/club/Nextcloud/master/Masterarbeit/OOSC 2nd Edition.pdf:PDF:https\://bertrandmeyer.com/wp-content/upLoads/OOSC2.pdf},
  url       = {http://www.eiffel.com/doc/oosc/page.html
https://bertrandmeyer.com/wp-content/upLoads/OOSC2.pdf},
}

@Book{Hunt1999,
  author               = {Hunt, Andrew and Thomas, David},
  publisher            = {Addison-Wesley Professional},
  title                = {The Pragmatic Programmer: From Journeyman to Master},
  year                 = {1999},
  isbn                 = {020161622X},
  month                = {October},
  abstract             = {Programmers are craftspeople trained to use a certain set of tools (editors, object managers, version trackers) to generate a certain kind of product (programs) that will operate in some environment (operating systems on hardware assemblies). Like any other craft, computer programming has spawned a body of wisdom, most of which isn't taught at universities or in certification classes. Most programmers arrive at the so-called tricks of the trade over time, through independent experimentation. In <I>The Pragmatic Programmer</I>, Andrew Hunt and David Thomas codify many of the truths they've discovered during their respective careers as designers of software and writers of code.<p> Some of the authors' nuggets of pragmatism are concrete, and the path to their implementation is clear. They advise readers to learn one text editor, for example, and use it for everything. They also recommend the use of version-tracking software for even the smallest projects, and promote the merits of learning regular expression syntax and a text-manipulation language. Other (perhaps more valuable) advice is more light-hearted. In the debugging section, it is noted that, "if you see hoof prints think horses, not zebras." That is, suspect everything, but start looking for problems in the most obvious places. There are recommendations for making estimates of time and expense, and for integrating testing into the development process. You'll want a copy of <I>The Pragmatic Programmer</I> for two reasons: it displays your own accumulated wisdom more cleanly than you ever bothered to state it, and it introduces you to methods of work that you may not yet have considered. Working programmers will enjoy this book. <I>--David Wall</I><p> <B>Topics covered</B>: A useful approach to software design and construction that allows for efficient, profitable development of high-quality products. Elements of the approach include specification development, customer relations, team management, design practices, development tools, and testing procedures. This approach is presented with the help of anecdotes and technical problems.},
  added-at             = {2007-10-07T10:44:45.000+0200},
  biburl               = {https://www.bibsonomy.org/bibtex/2300865320a92ff985d41e5873e812641/fsteeg},
  citeulike-article-id = {200721},
  file                 = {:/Users/club/Nextcloud/master/Masterarbeit/Pragmatic Programmer 1999.pdf:PDF},
  howpublished         = {Paperback},
  interhash            = {2ba65cfc1b1a5e8867a0c21413b3c8fb},
  intrahash            = {300865320a92ff985d41e5873e812641},
  keywords             = {intelligent-systems programming},
  priority             = {2},
  timestamp            = {2009-04-30T14:23:47.000+0200},
  url                  = {http://www.amazon.ca/exec/obidos/redirect?tag=citeulike09-20{\&}path=ASIN/020161622X},
}

@InCollection{Jech1978,
  publisher = {Elsevier},
  title     = {Chapter 1 Axiomatic Set Theory},
  year      = {1978},
  editor    = {Thomas Jech},
  pages     = {1-77},
  series    = {Pure and Applied Mathematics},
  volume    = {79},
  abstract  = {Publisher Summary
This chapter presents the axioms of set theory. A set is a collection of all elements that satisfy a certain given property. The chapter introduces ordinal numbers and proves the theorems on transfinite induction and transfinite recursion. It discusses cardinal and real numbers and presents several hypotheses. The chapter describes the axioms of choice.},
  doi       = {https://doi.org/10.1016/S0079-8169(08)61192-7},
  issn      = {0079-8169},
  url       = {https://www.sciencedirect.com/science/article/pii/S0079816908611927},
}

@Comment{jabref-meta: databaseType:bibtex;}
