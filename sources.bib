@Book{Gamma1994,
  author    = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides, John},
  publisher = {Addison-Wesley},
  title     = {Design patterns},
  year      = {1994},
  address   = {Boston, Mass.},
  isbn      = {9780201633610},
  note      = {Literaturverz. S. 375 - 381},
  series    = {Addison-Wesley professional computing series},
  pagetotal = {395},
  ppn_gvk   = {664828671},
  subtitle  = {Elements of reusable object-oriented software},
}

@Manual{metadocs,
  title        = {Metalama Documentation},
  author       = {{Metalama Developers}},
  month        = oct,
  organization = {{SharpCrafters s.r.o. PostSharp}},
  year         = {2024},
  timestamp    = {2024-10-21},
  url          = {https://github.com/postsharp/Metalama.Documentation/tree/develop/2024.2},
  urldate      = {2024-11-07},
}

@Manual{dotnetdocs,
  title        = {Dotnet C# Documentation},
  author       = {{Microsoft} and {The dotnet contributors}},
  month        = oct,
  organization = {Microsoft},
  year         = {2024},
  timestamp    = {2024-10-21},
  url          = {https://github.com/dotnet/docs/commit/f747d15fbdcd9dbf75045d36a956bce22a120af5},
  urldate      = {2024-11-07},
}

@Book{Meyer1997,
  author    = {Bertrand Meyer},
  publisher = {Prentice-Hall},
  title     = {Object-Oriented Software Construction, 2nd Edition},
  year      = {1997},
  isbn      = {0-13-629155-4},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/books/ph/Meyer97.bib},
  file      = {Full document:/Users/club/Nextcloud/master/Masterarbeit/OOSC 2nd Edition.pdf:PDF:https\://bertrandmeyer.com/wp-content/upLoads/OOSC2.pdf},
  url       = {http://www.eiffel.com/doc/oosc/page.html
https://bertrandmeyer.com/wp-content/upLoads/OOSC2.pdf},
}

@Book{Hunt1999,
  author               = {Hunt, Andrew and Thomas, David},
  publisher            = {Addison-Wesley Professional},
  title                = {The Pragmatic Programmer: From Journeyman to Master},
  year                 = {1999},
  isbn                 = {020161622X},
  month                = {October},
  abstract             = {Programmers are craftspeople trained to use a certain set of tools (editors, object managers, version trackers) to generate a certain kind of product (programs) that will operate in some environment (operating systems on hardware assemblies). Like any other craft, computer programming has spawned a body of wisdom, most of which isn't taught at universities or in certification classes. Most programmers arrive at the so-called tricks of the trade over time, through independent experimentation. In <I>The Pragmatic Programmer</I>, Andrew Hunt and David Thomas codify many of the truths they've discovered during their respective careers as designers of software and writers of code.<p> Some of the authors' nuggets of pragmatism are concrete, and the path to their implementation is clear. They advise readers to learn one text editor, for example, and use it for everything. They also recommend the use of version-tracking software for even the smallest projects, and promote the merits of learning regular expression syntax and a text-manipulation language. Other (perhaps more valuable) advice is more light-hearted. In the debugging section, it is noted that, "if you see hoof prints think horses, not zebras." That is, suspect everything, but start looking for problems in the most obvious places. There are recommendations for making estimates of time and expense, and for integrating testing into the development process. You'll want a copy of <I>The Pragmatic Programmer</I> for two reasons: it displays your own accumulated wisdom more cleanly than you ever bothered to state it, and it introduces you to methods of work that you may not yet have considered. Working programmers will enjoy this book. <I>--David Wall</I><p> <B>Topics covered</B>: A useful approach to software design and construction that allows for efficient, profitable development of high-quality products. Elements of the approach include specification development, customer relations, team management, design practices, development tools, and testing procedures. This approach is presented with the help of anecdotes and technical problems.},
  added-at             = {2007-10-07T10:44:45.000+0200},
  biburl               = {https://www.bibsonomy.org/bibtex/2300865320a92ff985d41e5873e812641/fsteeg},
  citeulike-article-id = {200721},
  file                 = {:/Users/club/Nextcloud/master/Masterarbeit/Pragmatic Programmer 1999.pdf:PDF},
  howpublished         = {Paperback},
  interhash            = {2ba65cfc1b1a5e8867a0c21413b3c8fb},
  intrahash            = {300865320a92ff985d41e5873e812641},
  keywords             = {intelligent-systems programming},
  priority             = {2},
  timestamp            = {2009-04-30T14:23:47.000+0200},
}

@InCollection{Jech1978,
  publisher = {Elsevier},
  title     = {Chapter 1 Axiomatic Set Theory},
  year      = {1978},
  editor    = {Thomas Jech},
  pages     = {1-77},
  series    = {Pure and Applied Mathematics},
  volume    = {79},
  abstract  = {Publisher Summary
This chapter presents the axioms of set theory. A set is a collection of all elements that satisfy a certain given property. The chapter introduces ordinal numbers and proves the theorems on transfinite induction and transfinite recursion. It discusses cardinal and real numbers and presents several hypotheses. The chapter describes the axioms of choice.},
  doi       = {https://doi.org/10.1016/S0079-8169(08)61192-7},
  issn      = {0079-8169},
  url       = {https://www.sciencedirect.com/science/article/pii/S0079816908611927},
}

@Book{Freeman2015,
  author    = {Freeman, Adam},
  publisher = {Apress},
  title     = {Pro Design Patterns in Swift},
  year      = {2015},
  address   = {[Berkeley, Calif.]},
  isbn      = {9781484203941},
  series    = {SpringerLink},
  pagetotal = {59295},
  ppn_gvk   = {1656343649},
}

@Book{Nesteruk2022,
  author    = {Nesteruk, Dmitri},
  publisher = {Apress L. P.},
  title     = {Design Patterns In . NET 6},
  year      = {2022},
  address   = {Berkeley, CA},
  edition   = {3rd},
  isbn      = {9781484282458},
  note      = {Description based on publisher supplied metadata and other sources.},
  pagetotal = {1469},
  ppn_gvk   = {1859887635},
}

@Book{Martin2012,
  author    = {Martin, Robert C.},
  publisher = {Prentice Hall},
  title     = {Clean code},
  year      = {2012},
  address   = {Upper Saddle River, NJ},
  edition   = {[Repr.]},
  isbn      = {0132350882},
  series    = {Robert C. Martin series},
  pagetotal = {431},
  ppn_gvk   = {1616281510},
  subtitle  = {A handbook of agile software craftsmanship},
}

@Article{OBrien2009,
  author  = {O'Brien, Larry and Gamma, Erich and Helm, Richard and Johnson, Ralph},
  title   = {Design Patterns 15 Years Later: An Interview with Erich Gamma, Richard Helm, and Ralph Johnson},
  year    = {2009},
  month   = oct,
  url     = {https://www.informit.com/articles/article.aspx?p=1404056},
  urldate = {2024-11-07},
}

@Article{Densmore2004,
  author  = {Densmore, Scott and Button, Brian},
  title   = {Why Singletons Are Evil},
  year    = {2004},
  month   = may,
  url     = {https://learn.microsoft.com/en-us/archive/blogs/scottdensmore/why-singletons-are-evil},
  urldate = {2024-11-07},
}

@Book{Martin2014,
  author    = {Martin, Robert C.},
  publisher = {Pearson},
  title     = {Agile software development, principles, patterns, and practices},
  year      = {2014},
  address   = {Harlow},
  edition   = {First edition, Pearson new international edition},
  isbn      = {9781292038360},
  pagetotal = {531},
  ppn_gvk   = {1739159063},
}

@InProceedings{Kiczales1997,
  author    = {Gregor Kiczales and John Lamping and Anurag Mendhekar and Chris Maeda and Cristina Videira Lopes and Jean{-}Marc Loingtier and John Irwin},
  booktitle = {ECOOP'97 - Object-Oriented Programming, 11th European Conference, Jyv{\"{a}}skyl{\"{a}}, Finland, June 9-13, 1997, Proceedings},
  title     = {Aspect-Oriented Programming},
  year      = {1997},
  editor    = {Mehmet Aksit and Satoshi Matsuoka},
  pages     = {220--242},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {1241},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/ecoop/KiczalesLMMLLI97.bib},
  doi       = {10.1007/BFB0053381},
  file      = {:/Users/club/Nextcloud/master/Masterarbeit/kiczales-ECOOP1997-AOP.pdf:PDF},
  url       = {https://www.cs.ubc.ca/~gregor/papers/kiczales-ECOOP1997-AOP.pdf},
}

@Book{Czarnecki2005,
  author    = {Czarnecki, Krzysztof and Eisenecker, Ulrich W. and Eisenecker, Ulrich},
  publisher = {Addison Wesley},
  title     = {Generative programming},
  year      = {2005},
  address   = {Boston},
  edition   = {6. print.},
  isbn      = {0201309777},
  note      = {Literaturverz. S. 757 - 798},
  pagetotal = {832},
  ppn_gvk   = {512058504},
  subtitle  = {Methods, tools, and applications},
}

@Book{Kiczales1999,
  author    = {Kiczales, Gregor and DesRivières, Jim and Bobrow, Daniel Gureasko},
  publisher = {MIT Press},
  title     = {The art of the metaobject protocol},
  year      = {1999},
  address   = {Cambridge, Mass. [u.a.]},
  edition   = {5. printing},
  isbn      = {0262610744},
  pagetotal = {335},
  ppn_gvk   = {36046310X},
}

@InProceedings{Courbis2005,
  author    = {Courbis, Carine and Finkelstein, Anthony},
  booktitle = {Proceedings of the 27th International Conference on Software Engineering},
  title     = {Towards aspect weaving applications},
  year      = {2005},
  address   = {New York, NY, USA},
  month     = may,
  pages     = {69–77},
  publisher = {Association for Computing Machinery},
  series    = {ICSE '05},
  abstract  = {Software must be adapted to accommodate new features in the context of changing requirements. In this paper, we illustrate how applications with aspect weaving capabilities can be easily and dynamically adapted with unforseen features. Aspects were used at three levels: in the context of semantic analysers, within a BPEL engine that orchestrates Web Services, and finally within BPEL processes themselves. Each level uses its own tailored domain-specific aspect language that is easier to manipulate than a general-purpose one (close to the programming language) and the pointcuts are independent from the implementation.},
  doi       = {10.1145/1062455.1062484},
  file      = {:/Users/club/Nextcloud/master/Masterarbeit/Towards Aspect Weaving Applications.pdf:PDF},
  isbn      = {1581139632},
  keywords  = {software adaptability, domain-specific aspect language, aspect weaver, BPEL, AOP},
  location  = {St. Louis, MO, USA},
  numpages  = {9},
  url       = {https://doi.org/10.1145/1062455.1062484
https://dl.acm.org/doi/abs/10.1145/1062455.1062484},
}

@Manual{aspectjdocs,
  title        = {The AspectJ™ Programming Guide},
  author       = {{the AspectJ Team} and {Xerox Corporation} and {Palo Alto Research Center}},
  organization = {{Xerox Corporation}, {Palo Alto Research Center}},
  year         = {2003},
  file         = {:/Users/club/Nextcloud/master/Masterarbeit/The AspectJTM Programming Guide.html:URL},
  url          = {https://eclipse.dev/aspectj/doc/released/progguide/printable.html},
  urldate      = {2024-11-10},
}

@InProceedings{Mooers1965,
  author    = {Mooers, C. N. and Deutsch, L. P. and Floyd, R. W.},
  booktitle = {Proceedings of the 1965 20th National Conference},
  title     = {Programming languages for non-numeric processing—1: TRAC, a text handling language},
  year      = {1965},
  address   = {New York, NY, USA},
  pages     = {229–246},
  publisher = {Association for Computing Machinery},
  series    = {ACM '65},
  abstract  = {THE TRAC SYSTEM for Text Reckoning And Compiling was developed as a software package and user language to go with the reactive typewriter. Design goals included the attainment of a concise and efficient input language, a straightforward philosophy and a high order of logical versatility. The external and internal forms of the TRAC language are the same. TRAC can accept, name, store, operate upon in any way, and emit any string of characters that can be produced on a teletypewriter keyboard. Any string can be treated at any time as text, name, or program.This paper describes the design decisions that went into the construction of the TRAC language and system. The acronym TRAC stands for “text reckoning and compiling”1. The TRAC system had its genesis in the need for a general tool for dealing with text. In its later stages, TRAC developed in parallel with the evolution of the reactive typewriter concept2. TRAC is now running in a time-shared environment, and is currently undergoing testing and operational refinement3. In preliminary assessment, TRAC appears to exceed the design targets set for it.},
  doi       = {10.1145/800197.806048},
  file      = {:/Users/club/Nextcloud/master/Masterarbeit/trac.pdf:PDF},
  isbn      = {9781450374958},
  location  = {Cleveland, Ohio, USA},
  numpages  = {18},
  url       = {https://doi.org/10.1145/800197.806048
https://dl.acm.org/doi/10.1145/800197.806048},
}

@Manual{roslyndocs,
  title        = {Roslyn Documentation},
  author       = {{Microsoft} and {The dotnet contributors}},
  organization = {Microsoft},
  year         = {2024},
  url          = {https://github.com/dotnet/roslyn/tree/main/docs},
  urldate      = {2024-11-11},
}

@Book{Alexander1977,
  author    = {Alexander, Christopher},
  editor    = {Sara Ishikawa and Murray Silverstein and Max Jacobson},
  publisher = {Oxford Univ. Press},
  title     = {A pattern language},
  year      = {1977},
  address   = {New York, NY},
  edition   = {19. print},
  isbn      = {9780195019193},
  number    = {2},
  series    = {Center for Environmental Structure series},
  file      = {:/Users/club/Nextcloud/master/Masterarbeit/A Pattern Language.pdf:PDF},
  pagetotal = {1171},
  ppn_gvk   = {1019240164},
  subtitle  = {Towns, buildings, construction},
}

@Comment{jabref-meta: databaseType:bibtex;}
