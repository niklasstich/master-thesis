= Conclusion
This thesis explored the definition of aspect-oriented programming, how common software design patterns often address the cross-cutting concerns that AOP tries to build solutions for and the feasibility of using several metaprogramming technologies that facilitate code generation for the task of automatically generating the implementation to several of these commonly used software design patterns. The Moyou library, which implements the Memento, Singleton, Unsaved Changes and Factory patterns, demonstrates that it is entirely possible to use Metalama to generate useful patterns automatically with minimum user input whilst providing users with the ability to customize the implementation of the patterns. These patterns are thoroughly tested for their correctness, and the project provides a starting point for future development efforts of other patterns.

Throughout the implementation of the Moyou library, it has been proven that aspect-oriented programming, and more specifically Metalama, is a useful tool for abstracting out cross-cutting concerns from an application's business logic. This approach increased code reusability, as only a single aspect implementation is needed across all occurrences of a pattern in a given codebase, and adherence to the SRP was improved by moving the logic that addresses these cross-cutting concerns into aspect code instead. Furthermore, this separation between compile-time and run-time code can actually improve the testability of code and reduce the number of manual tests that have to be written for a codebase, as it can be ensured that aspects generate the correct code by writing compile-time tests for the aspects and unit tests for the code they generate. In addition to that, it was shown that the use of aspects improves the maintainability and readability of codebases by hiding repetitive code that is often unrelated to business logic from the programmer.

However, several downsides and challenges of using AOP for pattern implementation have also been discussed. One major downside inherent to the solution used is that code is hidden from the user. This is insofar useful as the developer need not concern themselves with the implementation details of the patterns they use to a certain extent, but potentially problematic in case they need to debug the code the aspects generate or, even worse, debug the aspect code that generates the pattern code. This problem is exacerbated the more types are affected by a pattern, as was discussed in the factory and abstract factory example. Using technologies like Metalama for AOP therefore poses a major barrier to entry as the learning curve for a developer who is new to a codebase increases. There is also the risk of vendor lock-in and being unable to customize the implementation of patterns in specific circumstances, which is partially mitigated by the Metalama feature of divorcing. It must also be mentioned that due to the nature of Metalama being a commercial product which requires a paid license to use in most cases, the usefulness of the Moyou library to some for-profit or even free open-source developers might be limited. As mentioned, not every pattern is a perfect fit for AOP either, as some of them don't really address cross-cutting concerns like the factory or command pattern examples, so the usage of AOP for implementing them must be well thought out.

Several points of potential improvements to the Moyou library have also been brought up, such as implementing new patterns like Command, Observer or Adapter and improving the existing implementations of patterns by taking more care towards potential performance impacts, more flexible choices of implementation strategies or verifying correct usage of these patterns via the use of Metalama fabrics.

In summary, this thesis demonstrated that source code generation packages like Moyou which are implemented using aspect-oriented programming tools like Metalama can offer a powerful means of automating the repetitive task of pattern implementation developers do daily by taking over the task of implementing these patterns and addressing cross-cutting concerns. While there are definitely challenges to overcome, the usage of AOP can support users immensely in the face of the task of developing and maintaining software of evergrowing complexity.